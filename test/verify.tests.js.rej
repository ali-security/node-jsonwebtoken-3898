diff a/test/verify.tests.js b/test/verify.tests.js	(rejected hunks)
@@ -1,22 +1,22 @@
-var jwt = require('../index');
-var jws = require('jws');
-var fs = require('fs');
-var path = require('path');
-var sinon = require('sinon');
-var JsonWebTokenError = require('../lib/JsonWebTokenError');
+const jwt = require('../index');
+const jws = require('jws');
+const fs = require('fs');
+const path = require('path');
+const sinon = require('sinon');
+const JsonWebTokenError = require('../lib/JsonWebTokenError');
 
-var assert = require('chai').assert;
-var expect = require('chai').expect;
+const assert = require('chai').assert;
+const expect = require('chai').expect;
 
 describe('verify', function() {
-  var pub = fs.readFileSync(path.join(__dirname, 'pub.pem'));
-  var priv = fs.readFileSync(path.join(__dirname, 'priv.pem'));
+  const pub = fs.readFileSync(path.join(__dirname, 'pub.pem'));
+  const priv = fs.readFileSync(path.join(__dirname, 'priv.pem'));
 
   it('should first assume JSON claim set', function (done) {
-    var header = { alg: 'RS256' };
-    var payload = { iat: Math.floor(Date.now() / 1000 ) };
+    const header = { alg: 'RS256' };
+    const payload = { iat: Math.floor(Date.now() / 1000 ) };
 
-    var signed = jws.sign({
+    const signed = jws.sign({
       header: header,
       payload: payload,
       secret: priv,
@@ -70,11 +70,11 @@ describe('verify', function() {
   });
 
   describe('secret or token as callback', function () {
-    var token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODU5Mn0.3aR3vocmgRpG05rsI9MpR6z2T_BGtMQaPq2YR6QaroU';
-    var key = 'key';
+    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODU5Mn0.3aR3vocmgRpG05rsI9MpR6z2T_BGtMQaPq2YR6QaroU';
+    const key = 'key';
 
-    var payload = { foo: 'bar', iat: 1437018582, exp: 1437018592 };
-    var options = {algorithms: ['HS256'], ignoreExpiration: true};
+    const payload = { foo: 'bar', iat: 1437018582, exp: 1437018592 };
+    const options = {algorithms: ['HS256'], ignoreExpiration: true};
 
     it('without callback', function (done) {
       jwt.verify(token, key, options, function (err, p) {
@@ -85,7 +85,7 @@ describe('verify', function() {
     });
 
     it('simple callback', function (done) {
-      var keyFunc = function(header, callback) {
+      const keyFunc = function(header, callback) {
         assert.deepEqual(header, { alg: 'HS256', typ: 'JWT' });
 
         callback(undefined, key);
@@ -99,7 +99,7 @@ describe('verify', function() {
     });
 
     it('should error if called synchronously', function (done) {
-      var keyFunc = function(header, callback) {
+      const keyFunc = function(header, callback) {
         callback(undefined, key);
       };
 
@@ -111,7 +111,7 @@ describe('verify', function() {
     });
 
     it('simple error', function (done) {
-      var keyFunc = function(header, callback) {
+      const keyFunc = function(header, callback) {
         callback(new Error('key not found'));
       };
 
@@ -124,7 +124,7 @@ describe('verify', function() {
     });
 
     it('delayed callback', function (done) {
-      var keyFunc = function(header, callback) {
+      const keyFunc = function(header, callback) {
         setTimeout(function() {
           callback(undefined, key);
         }, 25);
@@ -138,7 +138,7 @@ describe('verify', function() {
     });
 
     it('delayed error', function (done) {
-      var keyFunc = function(header, callback) {
+      const keyFunc = function(header, callback) {
         setTimeout(function() {
           callback(new Error('key not found'));
         }, 25);
@@ -155,17 +155,17 @@ describe('verify', function() {
 
   describe('expiration', function () {
     // { foo: 'bar', iat: 1437018582, exp: 1437018592 }
-    var token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODU5Mn0.3aR3vocmgRpG05rsI9MpR6z2T_BGtMQaPq2YR6QaroU';
-    var key = 'key';
+    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODU5Mn0.3aR3vocmgRpG05rsI9MpR6z2T_BGtMQaPq2YR6QaroU';
+    const key = 'key';
 
-    var clock;
+    let clock;
     afterEach(function () {
       try { clock.restore(); } catch (e) {}
     });
 
     it('should error on expired token', function (done) {
       clock = sinon.useFakeTimers(1437018650000); // iat + 58s, exp + 48s
-      var options = {algorithms: ['HS256']};
+      const options = {algorithms: ['HS256']};
 
       jwt.verify(token, key, options, function (err, p) {
         assert.equal(err.name, 'TokenExpiredError');
@@ -179,7 +179,7 @@ describe('verify', function() {
 
     it('should not error on expired token within clockTolerance interval', function (done) {
       clock = sinon.useFakeTimers(1437018594000); // iat + 12s, exp + 2s
-      var options = {algorithms: ['HS256'], clockTolerance: 5 }
+      const options = {algorithms: ['HS256'], clockTolerance: 5 }
 
       jwt.verify(token, key, options, function (err, p) {
         assert.isNull(err);
@@ -189,16 +189,16 @@ describe('verify', function() {
     });
 
     describe('option: clockTimestamp', function () {
-      var clockTimestamp = 1000000000;
+      const clockTimestamp = 1000000000;
       it('should verify unexpired token relative to user-provided clockTimestamp', function (done) {
-        var token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);
+        const token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);
         jwt.verify(token, key, {clockTimestamp: clockTimestamp}, function (err) {
           assert.isNull(err);
           done();
         });
       });
       it('should error on expired token relative to user-provided clockTimestamp', function (done) {
-        var token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);
+        const token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);
         jwt.verify(token, key, {clockTimestamp: clockTimestamp + 1}, function (err, p) {
           assert.equal(err.name, 'TokenExpiredError');
           assert.equal(err.message, 'jwt expired');
@@ -209,7 +209,7 @@ describe('verify', function() {
         });
       });
       it('should verify clockTimestamp is a number', function (done) {
-        var token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);
+        const token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);
         jwt.verify(token, key, {clockTimestamp: 'notANumber'}, function (err, p) {
           assert.equal(err.name, 'JsonWebTokenError');
           assert.equal(err.message,'clockTimestamp must be a number');
@@ -221,10 +221,10 @@ describe('verify', function() {
 
     describe('option: maxAge and clockTimestamp', function () {
       // { foo: 'bar', iat: 1437018582, exp: 1437018800 } exp = iat + 218s
-      var token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODgwMH0.AVOsNC7TiT-XVSpCpkwB1240izzCIJ33Lp07gjnXVpA';
+      const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODgwMH0.AVOsNC7TiT-XVSpCpkwB1240izzCIJ33Lp07gjnXVpA';
       it('cannot be more permissive than expiration', function (done) {
-        var clockTimestamp = 1437018900;  // iat + 318s (exp: iat + 218s)
-        var options = {algorithms: ['HS256'], clockTimestamp: clockTimestamp, maxAge: '1000y'};
+        const clockTimestamp = 1437018900;  // iat + 318s (exp: iat + 218s)
+        const options = {algorithms: ['HS256'], clockTimestamp: clockTimestamp, maxAge: '1000y'};
 
         jwt.verify(token, key, options, function (err, p) {
           // maxAge not exceded, but still expired
@@ -238,4 +238,35 @@ describe('verify', function() {
       });
     });
   });
+
+  describe('when verifying a token with an unsupported public key type', function () {
+    it('should throw an error', function() {
+      const token = 'eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2Njk5OTAwMDN9.YdjFWJtPg_9nccMnTfQyesWQ0UX-GsWrfCGit_HqjeIkNjoV6dkAJ8AtbnVEhA4oxwqSXx6ilMOfHEjmMlPtyyyVKkWKQHcIWYnqPbNSEv8a7Men8KhJTIWb4sf5YbhgSCpNvU_VIZjLO1Z0PzzgmEikp0vYbxZFAbCAlZCvUlcIc-kdjIRCnDJe0BBrYRxNLEJtYsf7D1yFIFIqw8-VP87yZdExA4eHsTaE84SgnL24ZK5h5UooDx-IRNd_rrMyio8kNy63grVxCWOtkXZ26iZk6v-HMsnBqxvUwR6-8wfaWrcpADkyUO1q3SNsoTdwtflbvfwgjo3uve0IvIzHMw';
+      const key = fs.readFileSync(path.join(__dirname, 'dsa-public.pem'));
+
+      expect(function() {
+        jwt.verify(token, key);
+      }).to.throw('Unknown key type "dsa".');
+    });
+  });
+
+  describe('when verifying a token with an incorrect public key type', function () {
+    it('should throw a validation error if key validation is enabled', function() {
+      const token = 'eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXkiOiJsb2FkIiwiaWF0IjoxNjcwMjMwNDE2fQ.7TYP8SB_9Tw1fNIfuG60b4tvoLPpDAVBQpV1oepnuKwjUz8GOw4fRLzclo0Q2YAXisJ3zIYMEFsHpYrflfoZJQ';
+      const key = fs.readFileSync(path.join(__dirname, 'rsa-public.pem'));
+
+      expect(function() {
+        jwt.verify(token, key, { algorithms: ['ES256'] });
+      }).to.throw('"alg" parameter for "rsa" key type must be one of: RS256, PS256, RS384, PS384, RS512, PS512.');
+    });
+
+    it('should throw an unknown error if key validation is disabled', function() {
+      const token = 'eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXkiOiJsb2FkIiwiaWF0IjoxNjcwMjMwNDE2fQ.7TYP8SB_9Tw1fNIfuG60b4tvoLPpDAVBQpV1oepnuKwjUz8GOw4fRLzclo0Q2YAXisJ3zIYMEFsHpYrflfoZJQ';
+      const key = fs.readFileSync(path.join(__dirname, 'rsa-public.pem'));
+
+      expect(function() {
+        jwt.verify(token, key, { algorithms: ['ES256'], allowInvalidAsymmetricKeyTypes: true });
+      }).to.not.throw('"alg" parameter for "rsa" key type must be one of: RS256, PS256, RS384, PS384, RS512, PS512.');
+    });
+  });
 });
