diff a/test/schema.tests.js b/test/schema.tests.js	(rejected hunks)
@@ -6,31 +6,31 @@ var PS_SUPPORTED = require('../lib/psSupported');
 describe('schema', function() {
 
   describe('sign options', function() {
-
     var cert_rsa_priv = fs.readFileSync(__dirname + '/rsa-private.pem');
     var cert_ecdsa_priv = fs.readFileSync(__dirname + '/ecdsa-private.pem');
+    var cert_secp384r1_priv = fs.readFileSync(__dirname + '/secp384r1-private.pem');
+    var cert_secp521r1_priv = fs.readFileSync(__dirname + '/secp521r1-private.pem');
 
-    function sign(options, secret) {
-      var isEcdsa = options.algorithm && options.algorithm.indexOf('ES') === 0;
-      jwt.sign({foo: 123}, secret || (isEcdsa ? cert_ecdsa_priv : cert_rsa_priv), options);
+    function sign(options, secretOrPrivateKey) {
+      jwt.sign({foo: 123}, secretOrPrivateKey, options);
     }
 
     it('should validate algorithm', function () {
       expect(function () {
-        sign({ algorithm: 'foo' });
+        sign({ algorithm: 'foo' }, cert_rsa_priv);
       }).to.throw(/"algorithm" must be a valid string enum value/);
-      sign({ algorithm: 'none' });
-      sign({algorithm: 'RS256'});
-      sign({algorithm: 'RS384'});
-      sign({algorithm: 'RS512'});
+      sign({ algorithm: 'none' }, null);
+      sign({algorithm: 'RS256'}, cert_rsa_priv);
+      sign({algorithm: 'RS384'}, cert_rsa_priv);
+      sign({algorithm: 'RS512'}, cert_rsa_priv);
       if (PS_SUPPORTED) {
-        sign({algorithm: 'PS256'});
-        sign({algorithm: 'PS384'});
-        sign({algorithm: 'PS512'});
+        sign({algorithm: 'PS256'}, cert_rsa_priv);
+        sign({algorithm: 'PS384'}, cert_rsa_priv);
+        sign({algorithm: 'PS512'}, cert_rsa_priv);
       }
-      sign({algorithm: 'ES256'});
-      sign({algorithm: 'ES384'});
-      sign({algorithm: 'ES512'});
+      sign({algorithm: 'ES256'}, cert_ecdsa_priv);
+      sign({algorithm: 'ES384'}, cert_secp384r1_priv);
+      sign({algorithm: 'ES512'}, cert_secp521r1_priv);
       sign({algorithm: 'HS256'}, 'superSecret');
       sign({algorithm: 'HS384'}, 'superSecret');
       sign({algorithm: 'HS512'}, 'superSecret');
